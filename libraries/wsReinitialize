library (
    author: "tomw",
    category: "",
    description: "WebSocket connection management",
    name: "wsReinitialize",
    namespace: "tomw",
    documentationLink: ""
)

def reinitialize()
{
    unschedule(initialize)
    
    // thanks ogiewon for the example
    
    // first delay is 2 seconds, doubles every time
    def delayCalc = (state.reconnectDelay ?: 1) * 2    
    // upper limit is 600s
    def reconnectDelay = delayCalc <= 600 ? delayCalc : 600
    
    state.reconnectDelay = reconnectDelay
    runIn(reconnectDelay, initialize)
}

def webSocketStatus(String message)
{
    logDebug("webSocketStatus: ${message}")

    def reInitStrings = ["status: closing", "failure:"]
    
    // thanks for the idea: https://community.hubitat.com/t/websocket-client/11843/15
    if(message?.startsWith("status: open"))
    {
        state.reconnectDelay = 1
        setWasExpectedClose(false)
        
        return
    }
    else if(reInitStrings.findAll { message?.contains(it) })
    {
        if(getWasExpectedClose())
        {
            setWasExpectedClose(false)
            return
        }
        
        reinitialize()
        
        return
    }
}

def setWasExpectedClose(wasExpected)
{
    setConnState("wasExpectedClose", wasExpected)
}

def getWasExpectedClose()
{
    return getConnState("wasExpectedClose")
}

def closeWebSocket()
{
    try
    {
        setWasExpectedClose(true)       
        interfaces.webSocket.close()
    }
    catch (Exception e)
    {
        // swallow errors
    }
}

import groovy.transform.Field
@Field static connState = [:].asSynchronized()

def setConnState(name, value)
{
    connState?.putAt(name, value)
}

def getConnState(name)
{
    return connState?.getAt(name)
}
